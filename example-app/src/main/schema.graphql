# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

"The result of Finshark callback."
type FinsharkCallbackResult {
    "Placeholder response to return to Finshark when they post updates from their Flow."
    status: String!
}

"The result of Repaay Webhook."
type ReepayWebhookResult {
    """

    Unique reference per unique webhook to return to Reepay when they post webhook
    notifications
    """
    waitToken: String!
}

"The result of Swish callback."
type SwishCallbackResult {
    "Placeholder response to return to Swish when they post the payment status"
    status: String!
}

"mutation root"
type mutation_root {
    "Finshark callback payload"
    finsharkCallback(payload: FinsharkCallbackInput!): FinsharkCallbackResult!
    "Mutation used to translate reepay webhook rest calls"
    reepayWebhook(webhook: ReepayWebhookInput!): ReepayWebhookResult!
    "Swish callback payload"
    swishCallback(payload: SwishCallbackInput!): SwishCallbackResult!
    "Swish refund callback payload"
    swishRefundCallback(payload: SwishRefundCallbackInput!): SwishCallbackResult!
}

type query_root {
    version: String!
}

"Payment Status as returned by Swish"
enum SwishPaymentStatus {
    CANCELLED
    CREATED
    DECLINED
    ERROR
    PAID
}

"Refund Status as returned by Swish"
enum SwishRefundStatus {
    DEBITED
    ERROR
    PAID
}

"Arguments from Finshark for payment status updation"
input FinsharkCallbackInput {
    "The authorization id for the Finshark payment"
    authorizationId: String!
    "Message as shared by the Flow(ex: Flow closed and such)"
    message: String!
    "The Finshark payment ID"
    paymentId: String!
    "The result for the payment."
    result: String!
    "The session ID of the Finshark flow"
    sessionId: String
    "The signing basket ID for the payment."
    signingBasketId: String
    "The token used for the Finshark callback to identify merchantId and paymentId"
    token: String!
}

"Arguments from Reepay webhook post json"
input ReepayWebhookInput {
    "Credit id. Included if the event is an invoice credit."
    credit: String
    """

    Credit note id. Included if the event relates to an invoice refund
    or an invoice credit.
    """
    creditNote: String
    "Customer handle. Included if event relates to a customer resource."
    customer: String
    "Id of event triggering webhook (see events)."
    eventId: String!
    "The event type (see below and events)."
    eventType: String!
    """

    Unique id for webhook. If multiple URL’s are used each request will
    have different id’s but same event_id.
    """
    id: String!
    """

    Invoice handle. Is inv-<invoice_number> if invoice was created
    automatically for subscription. Included if event relates to an
    invoice resource.
    """
    invoice: String
    "Payment method id. Included for the customer_payment_method_added event."
    paymentMethod: String
    "Payment method reference. For a Checkout session the reference will be the session id if it has not been explicitly defined when creating the session."
    paymentMethodReference: String
    "Signature to verify the authenticity of the webhook. See below."
    signature: String!
    """

    Subscription handle. Included if event relates to a subscription
    resource.
    """
    subscription: String
    "Timestamp in ISO-8601 when the webhook was triggered."
    timestamp: String!
    """

    For invoice events a transaction id is included if the event was result of a
    transaction, e.g. a card settle transaction. The transaction id the
    same as refund id for refunds.
    """
    transaction: String
}

"Arguments from Swish for payment status updation"
input SwishCallbackInput {
    "The amount the customer pays"
    amount: Float!
    "The callback URL that Swish uses to let us know of the status of the payment."
    callbackUrl: String!
    "The currency of the payment"
    currency: String!
    "The date the payment was created on Swish"
    dateCreated: String!
    "The date the user paid"
    datePaid: String
    "The error code by Swish"
    errorCode: String
    "The error message for the Swish payment"
    errorMessage: String
    "The instruction UUID that we create a Swish payment request with."
    id: String!
    "The message for the payment"
    message: String!
    "The Swish number the customer is paying to"
    payeeAlias: String!
    "The reference for the payment."
    payeePaymentReference: String
    "The Swish number of the customer"
    payerAlias: String
    "The reference for the payment for Swish."
    paymentReference: String!
    "The status of the payment"
    status: SwishPaymentStatus!
    "The token used for the Swish callback to identify merchantId and paymentId"
    token: String!
}

"Arguments from Swish for payment status updation"
input SwishRefundCallbackInput {
    "Additional information related to the Swish refund"
    additionalInformation: String
    "The amount that was refunded."
    amount: Float!
    "The callback identifier for the Swish refund."
    callbackIdentifier: String
    "The callback URL that Swish uses to let us know of the status of the refund."
    callbackUrl: String!
    "The currency of the payment"
    currency: String!
    "The date the payment was created on Swish"
    dateCreated: String!
    "The date the user paid"
    datePaid: String
    "The error code by Swish"
    errorCode: String
    "The error message for the Swish payment"
    errorMessage: String
    "The instruction UUID that we create a Swish refund request with."
    id: String!
    "The message for the payment"
    message: String!
    "The payment reference that corresponds to the original Swish payment this refund relates to"
    originalPaymentReference: String!
    "The Swish number of the customer receiving the refund."
    payeeAlias: String!
    "The Swish number of the merchant performing the refund."
    payerAlias: String!
    "The reference for the payment."
    payerPaymentReference: String
    "The reference for the refund for Swish."
    paymentReference: String!
    "The status of the refund"
    status: SwishRefundStatus!
    "The token used for the Swish callback to identify merchantId and refundId"
    token: String!
}
