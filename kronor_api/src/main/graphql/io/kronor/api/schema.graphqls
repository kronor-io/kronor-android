schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
    """measured in seconds"""
    ttl: Int! = 60

    """refresh the cache entry"""
    refresh: Boolean! = false
) on QUERY

"""
Aguments for adding device information on a device related to a payment session.
"""
input AddSessionDeviceInformationInput {
    """
    The customer device browser name.

    Max length: 64.
    """
    browserName: String!

    """
    The customer device browser version.

    Max length: 64.
    """
    browserVersion: String!

    """
    The customer device fingerprint.

    Max length: 64.
    """
    fingerprint: String!

    """
    The customer device os name.

    Max length: 64.
    """
    osName: String!

    """
    The customer device os version.

    Max length: 64.
    """
    osVersion: String!

    """
    The customer device User-Agent string.

    Max length: 512.
    """
    userAgent: String!
}

"""
The result of adding information on the device related to a payment session.
"""
type AddSessionDeviceInformationResult {
    """True when customer device data has been stored correctly."""
    result: Boolean!
}

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _isNull: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _isNull: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"""Arguments for capturing a new PayPal payment"""
input CapturePayPalPaymentInput {
    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """
    The payment id of a PayPal payment, this is obtained
    with `newPayPalPayment`.

    Max length: 64.
    """
    paymentId: String!
}

"""The result of capturing a PayPal payment."""
type CapturePayPalPaymentResult {
    """The result of starting the PayPal payment capture."""
    paymentId: String!
}

"""
Boolean expression to compare columns of type "country". All fields are combined with logical 'AND'.
"""
input CountryComparisonExp {
    _eq: country
    _gt: country
    _gte: country
    _in: [country!]
    _isNull: Boolean
    _lt: country
    _lte: country
    _neq: country
    _nin: [country!]
}

"""Describes the schema for credit card details"""
type CreditCardDetails {
    """Session id"""
    sessionId: String

    """Session url"""
    sessionUrl: String
}

"""
order by aggregate values of table "runtime.transaction_credit_card_details"
"""
input CreditCardDetailsAggregateOrderBy {
    count: OrderBy
    max: CreditCardDetailsMaxOrderBy
    min: CreditCardDetailsMinOrderBy
}

"""
Boolean expression to filter rows from the table "runtime.transaction_credit_card_details". All fields are combined with a logical 'AND'.
"""
input CreditCardDetailsBoolExp {
    _and: [CreditCardDetailsBoolExp!]
    _not: CreditCardDetailsBoolExp
    _or: [CreditCardDetailsBoolExp!]
    sessionId: StringComparisonExp
    sessionUrl: StringComparisonExp
}

"""
order by max() on columns of table "runtime.transaction_credit_card_details"
"""
input CreditCardDetailsMaxOrderBy {
    """Session id"""
    sessionId: OrderBy

    """Session url"""
    sessionUrl: OrderBy
}

"""
order by min() on columns of table "runtime.transaction_credit_card_details"
"""
input CreditCardDetailsMinOrderBy {
    """Session id"""
    sessionId: OrderBy

    """Session url"""
    sessionUrl: OrderBy
}

"""
Ordering options when selecting data from "runtime.transaction_credit_card_details".
"""
input CreditCardDetailsOrderBy {
    sessionId: OrderBy
    sessionUrl: OrderBy
}

"""
select columns of table "runtime.transaction_credit_card_details"
"""
enum CreditCardDetailsSelectColumn {
    """column name"""
    sessionId

    """column name"""
    sessionUrl
}

"""Arguments for creating a new credit card payment"""
input CreditCardPaymentInput {
    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """The original return url as provided by the merchant."""
    merchantReturnUrl: String

    """
    The url to return to after the payment is done. If the payment
    screen is opened on a separate window, customer will be redirected
    here on payment success or error.
    """
    returnUrl: String!
}

"""The result of initiating a credit card payment."""
type CreditCardPaymentResult {
    """
    Once a payment is initialized, we will start the credit card payment
    workflow. You can use this token to query the current status
    of the payment, with paymentRequests query.
    """
    waitToken: String!
}

"""
Boolean expression to compare columns of type "currency". All fields are combined with logical 'AND'.
"""
input CurrencyComparisonExp {
    _eq: currency
    _gt: currency
    _gte: currency
    _in: [currency!]
    _isNull: Boolean
    _lt: currency
    _lte: currency
    _neq: currency
    _nin: [currency!]
}

"""
columns and relationships of "runtime.current_payment_detail"
"""
type CurrentPaymentDetail {
    detail(
        """JSON select path"""
        path: String
    ): jsonb!
}

"""
order by aggregate values of table "runtime.current_payment_detail"
"""
input CurrentPaymentDetailAggregateOrderBy {
    count: OrderBy
}

"""
Boolean expression to filter rows from the table "runtime.current_payment_detail". All fields are combined with a logical 'AND'.
"""
input CurrentPaymentDetailBoolExp {
    _and: [CurrentPaymentDetailBoolExp!]
    _not: CurrentPaymentDetailBoolExp
    _or: [CurrentPaymentDetailBoolExp!]
    detail: JsonbComparisonExp
}

"""
Ordering options when selecting data from "runtime.current_payment_detail".
"""
input CurrentPaymentDetailOrderBy {
    detail: OrderBy
}

"""
select columns of table "runtime.current_payment_detail"
"""
enum CurrentPaymentDetailSelectColumn {
    """column name"""
    detail
}

"""
columns and relationships of "runtime.current_payment_status"
"""
type CurrentPaymentStatus {
    enteredAt: timestamptz!
    status: PaymentStatusEnum!
}

"""
order by aggregate values of table "runtime.current_payment_status"
"""
input CurrentPaymentStatusAggregateOrderBy {
    count: OrderBy
    max: CurrentPaymentStatusMaxOrderBy
    min: CurrentPaymentStatusMinOrderBy
}

"""
Boolean expression to filter rows from the table "runtime.current_payment_status". All fields are combined with a logical 'AND'.
"""
input CurrentPaymentStatusBoolExp {
    _and: [CurrentPaymentStatusBoolExp!]
    _not: CurrentPaymentStatusBoolExp
    _or: [CurrentPaymentStatusBoolExp!]
    enteredAt: TimestamptzComparisonExp
    status: PaymentStatusEnumComparisonExp
}

"""
order by max() on columns of table "runtime.current_payment_status"
"""
input CurrentPaymentStatusMaxOrderBy {
    enteredAt: OrderBy
}

"""
order by min() on columns of table "runtime.current_payment_status"
"""
input CurrentPaymentStatusMinOrderBy {
    enteredAt: OrderBy
}

"""
Ordering options when selecting data from "runtime.current_payment_status".
"""
input CurrentPaymentStatusOrderBy {
    enteredAt: OrderBy
    status: OrderBy
}

"""
select columns of table "runtime.current_payment_status"
"""
enum CurrentPaymentStatusSelectColumn {
    """column name"""
    enteredAt

    """column name"""
    status
}

"""ordering argument of a cursor"""
enum CursorOrdering {
    """ascending ordering of the cursor"""
    ASC

    """descending ordering of the cursor"""
    DESC
}

"""Additional payment data"""
type CustomerPaymentData {
    locale: spoken_lang!
}

"""
Boolean expression to filter rows from the table "dna.customer_payment_data". All fields are combined with a logical 'AND'.
"""
input CustomerPaymentDataBoolExp {
    _and: [CustomerPaymentDataBoolExp!]
    _not: CustomerPaymentDataBoolExp
    _or: [CustomerPaymentDataBoolExp!]
    locale: SpokenLangComparisonExp
}

"""Ordering options when selecting data from "dna.customer_payment_data"."""
input CustomerPaymentDataOrderBy {
    locale: OrderBy
}

"""Arguments for cancelling a direct debit payment"""
input DirectDebitPaymentCancelInput {
    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """
    The payment id to cancel, this is obtained when a payment
    request is made. As opposed to a payment_reference which is
    the same across multiple payment attempts, this is unique only
    for each specific payment.

    Max length: 64.
    """
    paymentId: String!
}

"""The result of cancelling a direct debit payment request."""
type DirectDebitPaymentCancelResult {
    """
    The returned token can be used to query whether the payment has
    been cancelled or not.
    """
    waitToken: String!
}

"""Arguments for creating a new direct debit payment"""
input DirectDebitPaymentInput {
    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """The url to return to after the payment is done."""
    returnUrl: String!
}

"""The result of initiating a direct debit payment."""
type DirectDebitPaymentResult {
    """
    Once a payment is initialized, we will start the direct debit payment
    workflow. You can use this token to query the current status
    of the payment.
    """
    waitToken: String!
}

"""
Describes the schema for the finshark payment transaction details to be used by hasura
"""
type FinsharkDetails {
    paymentFlowsUrl: String
}

"""
order by aggregate values of table "runtime.transaction_finshark_details"
"""
input FinsharkDetailsAggregateOrderBy {
    count: OrderBy
    max: FinsharkDetailsMaxOrderBy
    min: FinsharkDetailsMinOrderBy
}

"""
Boolean expression to filter rows from the table "runtime.transaction_finshark_details". All fields are combined with a logical 'AND'.
"""
input FinsharkDetailsBoolExp {
    _and: [FinsharkDetailsBoolExp!]
    _not: FinsharkDetailsBoolExp
    _or: [FinsharkDetailsBoolExp!]
    paymentFlowsUrl: StringComparisonExp
}

"""
order by max() on columns of table "runtime.transaction_finshark_details"
"""
input FinsharkDetailsMaxOrderBy {
    paymentFlowsUrl: OrderBy
}

"""
order by min() on columns of table "runtime.transaction_finshark_details"
"""
input FinsharkDetailsMinOrderBy {
    paymentFlowsUrl: OrderBy
}

"""
Ordering options when selecting data from "runtime.transaction_finshark_details".
"""
input FinsharkDetailsOrderBy {
    paymentFlowsUrl: OrderBy
}

"""
select columns of table "runtime.transaction_finshark_details"
"""
enum FinsharkDetailsSelectColumn {
    """column name"""
    paymentFlowsUrl
}

input JsonbCastExp {
    String: StringComparisonExp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
    _cast: JsonbCastExp

    """is the column contained in the given json value"""
    _containedIn: jsonb

    """does the column contain the given json value at the top level"""
    _contains: jsonb
    _eq: jsonb
    _gt: jsonb
    _gte: jsonb

    """does the string exist as a top-level key in the column"""
    _hasKey: String

    """do all of these strings exist as top-level keys in the column"""
    _hasKeysAll: [String!]

    """do any of these strings exist as top-level keys in the column"""
    _hasKeysAny: [String!]
    _in: [jsonb!]
    _isNull: Boolean
    _lt: jsonb
    _lte: jsonb
    _neq: jsonb
    _nin: [jsonb!]
}

"""Arguments for sending a log"""
input LogInput {
    """Any additional data you want to send, preferably a json encoded string"""
    additionalData: String

    """Unique client identifier"""
    clientSessionId: String!

    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """State context"""
    stateContext: String!

    """Name of the state to log"""
    stateName: String!
}

"""The result of log."""
type LogResult {
    """Placeholder response to return, always an empty string"""
    status: String!
}

"""List of merchants registered with us."""
type Merchant {
    """

    Currency in which the purchase and other operations are done.
    Only currencies in ISO-4217 format are recognized.
    The currency needs to match the supported currencies for the merchant.
    Example: SEK, EUR.

    """
    currency: currency!
    id: bigint!
}

"""
Boolean expression to filter rows from the table "tenant.merchant". All fields are combined with a logical 'AND'.
"""
input MerchantBoolExp {
    _and: [MerchantBoolExp!]
    _not: MerchantBoolExp
    _or: [MerchantBoolExp!]
    currency: CurrencyComparisonExp
    id: BigintComparisonExp
}

"""Ordering options when selecting data from "tenant.merchant"."""
input MerchantOrderBy {
    currency: OrderBy
    id: OrderBy
}

"""Describe the schema for mobilepay details."""
type MobilePayDetails {
    """Session id"""
    sessionId: String

    """Session url"""
    sessionUrl: String
}

"""
order by aggregate values of table "runtime.transaction_mobilepay_details"
"""
input MobilePayDetailsAggregateOrderBy {
    count: OrderBy
    max: MobilePayDetailsMaxOrderBy
    min: MobilePayDetailsMinOrderBy
}

"""
Boolean expression to filter rows from the table "runtime.transaction_mobilepay_details". All fields are combined with a logical 'AND'.
"""
input MobilePayDetailsBoolExp {
    _and: [MobilePayDetailsBoolExp!]
    _not: MobilePayDetailsBoolExp
    _or: [MobilePayDetailsBoolExp!]
    sessionId: StringComparisonExp
    sessionUrl: StringComparisonExp
}

"""
order by max() on columns of table "runtime.transaction_mobilepay_details"
"""
input MobilePayDetailsMaxOrderBy {
    """Session id"""
    sessionId: OrderBy

    """Session url"""
    sessionUrl: OrderBy
}

"""
order by min() on columns of table "runtime.transaction_mobilepay_details"
"""
input MobilePayDetailsMinOrderBy {
    """Session id"""
    sessionId: OrderBy

    """Session url"""
    sessionUrl: OrderBy
}

"""
Ordering options when selecting data from "runtime.transaction_mobilepay_details".
"""
input MobilePayDetailsOrderBy {
    sessionId: OrderBy
    sessionUrl: OrderBy
}

"""
select columns of table "runtime.transaction_mobilepay_details"
"""
enum MobilePayDetailsSelectColumn {
    """column name"""
    sessionId

    """column name"""
    sessionUrl
}

"""Arguments for creating a new MobilePay payment"""
input MobilePayPaymentInput {
    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """The original return url as provided by the merchant."""
    merchantReturnUrl: String

    """
    The url to return to after the payment is done. If the payment
    screen is opened on a separate window, customer will be redirected
    here on payment success or error.
    """
    returnUrl: String!
}

"""The result of initiating a MobilePay payment."""
type MobilePayPaymentResult {
    """
    Once a payment is initialized, we will start the MobilePay payment
    workflow. You can use this token to query the current status
    of the payment, with paymentRequests query.
    """
    waitToken: String!
}

"""column ordering options"""
enum OrderBy {
    """in ascending order, nulls last"""
    ASC

    """in ascending order, nulls first"""
    ASC_NULLS_FIRST

    """in ascending order, nulls last"""
    ASC_NULLS_LAST

    """in descending order, nulls first"""
    DESC

    """in descending order, nulls first"""
    DESC_NULLS_FIRST

    """in descending order, nulls last"""
    DESC_NULLS_LAST
}

"""Describes the schema for P24 details"""
type P24Details {
    """Session id"""
    sessionId: String

    """Session url"""
    sessionUrl: String
}

"""
order by aggregate values of table "runtime.transaction_p24_details"
"""
input P24DetailsAggregateOrderBy {
    count: OrderBy
    max: P24DetailsMaxOrderBy
    min: P24DetailsMinOrderBy
}

"""
Boolean expression to filter rows from the table "runtime.transaction_p24_details". All fields are combined with a logical 'AND'.
"""
input P24DetailsBoolExp {
    _and: [P24DetailsBoolExp!]
    _not: P24DetailsBoolExp
    _or: [P24DetailsBoolExp!]
    sessionId: StringComparisonExp
    sessionUrl: StringComparisonExp
}

"""
order by max() on columns of table "runtime.transaction_p24_details"
"""
input P24DetailsMaxOrderBy {
    """Session id"""
    sessionId: OrderBy

    """Session url"""
    sessionUrl: OrderBy
}

"""
order by min() on columns of table "runtime.transaction_p24_details"
"""
input P24DetailsMinOrderBy {
    """Session id"""
    sessionId: OrderBy

    """Session url"""
    sessionUrl: OrderBy
}

"""
Ordering options when selecting data from "runtime.transaction_p24_details".
"""
input P24DetailsOrderBy {
    sessionId: OrderBy
    sessionUrl: OrderBy
}

"""
select columns of table "runtime.transaction_p24_details"
"""
enum P24DetailsSelectColumn {
    """column name"""
    sessionId

    """column name"""
    sessionUrl
}

"""Arguments for creating a new P24 payment"""
input P24PaymentInput {
    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """The original return url as provided by the merchant."""
    merchantReturnUrl: String

    """
    The url to return to after the payment is done. If the payment
    screen is opened on a separate window, customer will be redirected
    here on payment success or error.
    """
    returnUrl: String!
}

"""The result of initiating a P24 payment."""
type P24PaymentResult {
    """
    Once a payment is initialized, we will start the P24 payment
    workflow. You can use this token to query the current status
    of the payment, with paymentRequests query.
    """
    paymentId: String!
}

"""
Boolean expression to compare columns of type "packed_phone_number". All fields are combined with logical 'AND'.
"""
input PackedPhoneNumberComparisonExp {
    _eq: packed_phone_number
    _gt: packed_phone_number
    _gte: packed_phone_number
    _in: [packed_phone_number!]
    _isNull: Boolean
    _lt: packed_phone_number
    _lte: packed_phone_number
    _neq: packed_phone_number
    _nin: [packed_phone_number!]
}

"""Describes the schema for paypal details"""
type PayPalDetails {
    """Error code from PayPal"""
    errorCode: String

    """Error message from PayPal"""
    errorMessage: String

    """Order ID as shared by PayPal"""
    orderId: String

    """PayPal payment URL"""
    paymentUrl: String
    paypalMerchantId: String
}

"""
order by aggregate values of table "runtime.transaction_paypal_details"
"""
input PayPalDetailsAggregateOrderBy {
    count: OrderBy
    max: PayPalDetailsMaxOrderBy
    min: PayPalDetailsMinOrderBy
}

"""
Boolean expression to filter rows from the table "runtime.transaction_paypal_details". All fields are combined with a logical 'AND'.
"""
input PayPalDetailsBoolExp {
    _and: [PayPalDetailsBoolExp!]
    _not: PayPalDetailsBoolExp
    _or: [PayPalDetailsBoolExp!]
    errorCode: StringComparisonExp
    errorMessage: StringComparisonExp
    orderId: StringComparisonExp
    paymentUrl: StringComparisonExp
    paypalMerchantId: StringComparisonExp
}

"""
order by max() on columns of table "runtime.transaction_paypal_details"
"""
input PayPalDetailsMaxOrderBy {
    """Error code from PayPal"""
    errorCode: OrderBy

    """Error message from PayPal"""
    errorMessage: OrderBy

    """Order ID as shared by PayPal"""
    orderId: OrderBy

    """PayPal payment URL"""
    paymentUrl: OrderBy
    paypalMerchantId: OrderBy
}

"""
order by min() on columns of table "runtime.transaction_paypal_details"
"""
input PayPalDetailsMinOrderBy {
    """Error code from PayPal"""
    errorCode: OrderBy

    """Error message from PayPal"""
    errorMessage: OrderBy

    """Order ID as shared by PayPal"""
    orderId: OrderBy

    """PayPal payment URL"""
    paymentUrl: OrderBy
    paypalMerchantId: OrderBy
}

"""
Ordering options when selecting data from "runtime.transaction_paypal_details".
"""
input PayPalDetailsOrderBy {
    errorCode: OrderBy
    errorMessage: OrderBy
    orderId: OrderBy
    paymentUrl: OrderBy
    paypalMerchantId: OrderBy
}

"""
select columns of table "runtime.transaction_paypal_details"
"""
enum PayPalDetailsSelectColumn {
    """column name"""
    errorCode

    """column name"""
    errorMessage

    """column name"""
    orderId

    """column name"""
    paymentUrl

    """column name"""
    paypalMerchantId
}

"""Arguments for creating a new PayPal payment"""
input PayPalPaymentInput {
    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """The original return url as provided by the merchant."""
    merchantReturnUrl: String

    """The url to return to after the payment is done."""
    returnUrl: String!
}

"""The result of initiating a PayPal payment."""
type PayPalPaymentResult {
    """
    Once a payment is initialized, we will start the PayPal payment
    workflow. You can use this id to query the current status of the
    payment.
    """
    paymentId: String!
}

"""Arguments for cancelling payment"""
input PaymentCancelInput {
    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!
}

"""The result of cancelling a payment request."""
type PaymentCancelResult {
    """
    The returned token can be used to query whether the payment has
    been cancelled or not.
    """
    waitToken: String
}

enum PaymentMethodEnum {
    """Credit or Debit cards"""
    CREDIT_CARD

    """Open Banking direct debit via Finshark"""
    FINSHARK_DIRECT_DEBIT

    """Open Banking recurring debit via Finshark"""
    FINSHARK_RECURRING_DEBIT

    """Pay with MobilePay Online"""
    MOBILEPAY

    """Pay with Przelewy24"""
    P24

    """Pay with PayPal"""
    PAYPAL

    """Swish"""
    SWISH

    """Pay with Vipps"""
    VIPPS
}

"""
Boolean expression to compare columns of type "PaymentMethodEnum". All fields are combined with logical 'AND'.
"""
input PaymentMethodEnumComparisonExp {
    _eq: PaymentMethodEnum
    _in: [PaymentMethodEnum!]
    _isNull: Boolean
    _neq: PaymentMethodEnum
    _nin: [PaymentMethodEnum!]
}

"""Payment methods available for a merchant."""
type PaymentMethodStatus {
    country: country!
    currency: currency!
    enabled: Boolean
    gateway: String!
    gatewayPaymentMethod: String
    id: bigint!

    """The payment method supported / available for this merchant.."""
    paymentMethod: PaymentMethodEnum!
}

"""
Boolean expression to filter rows from the table "tenant.payment_method_available". All fields are combined with a logical 'AND'.
"""
input PaymentMethodStatusBoolExp {
    _and: [PaymentMethodStatusBoolExp!]
    _not: PaymentMethodStatusBoolExp
    _or: [PaymentMethodStatusBoolExp!]
    country: CountryComparisonExp
    currency: CurrencyComparisonExp
    enabled: BooleanComparisonExp
    gateway: StringComparisonExp
    gatewayPaymentMethod: StringComparisonExp
    id: BigintComparisonExp
    paymentMethod: PaymentMethodEnumComparisonExp
}

"""
Ordering options when selecting data from "tenant.payment_method_available".
"""
input PaymentMethodStatusOrderBy {
    country: OrderBy
    currency: OrderBy
    enabled: OrderBy
    gateway: OrderBy
    gatewayPaymentMethod: OrderBy
    id: OrderBy
    paymentMethod: OrderBy
}

"""
select columns of table "tenant.payment_method_available"
"""
enum PaymentMethodStatusSelectColumn {
    """column name"""
    country

    """column name"""
    currency

    """column name"""
    enabled

    """column name"""
    gateway

    """column name"""
    gatewayPaymentMethod

    """column name"""
    id

    """column name"""
    paymentMethod
}

"""
Streaming cursor of the table "PaymentMethodStatus"
"""
input PaymentMethodStatusStreamCursorInput {
    """Stream column input with initial value"""
    initialValue: PaymentMethodStatusStreamCursorValueInput!

    """cursor ordering"""
    ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input PaymentMethodStatusStreamCursorValueInput {
    country: country
    currency: currency
    enabled: Boolean
    gateway: String
    gatewayPaymentMethod: String
    id: bigint

    """The payment method supported / available for this merchant.."""
    paymentMethod: PaymentMethodEnum
}

"""A payment requested"""
type PaymentRequest {
    amount: bigint!
    createdAt: timestamptz!
    currency: SupportedCurrencyEnum!

    """An object relationship"""
    customer: CustomerPaymentData

    """Additional information specific to the payment"""
    detail(
        """distinct select on columns"""
        distinctOn: [CurrentPaymentDetailSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [CurrentPaymentDetailOrderBy!]

        """filter the rows returned"""
        where: CurrentPaymentDetailBoolExp
    ): [CurrentPaymentDetail!]

    """Gives the latest status that the payment is on."""
    latestStatus(
        """distinct select on columns"""
        distinctOn: [CurrentPaymentStatusSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [CurrentPaymentStatusOrderBy!]

        """filter the rows returned"""
        where: CurrentPaymentStatusBoolExp
    ): [CurrentPaymentStatus!]

    """An object relationship"""
    merchant: Merchant!
    merchantReturnUrl: String
    message: String!
    paymentFlow: String
    paymentProvider: PaymentMethodEnum

    """An object relationship"""
    payment_method_used: PaymentMethodStatus

    """

    Payments are linked to a reference, this can be a purchase id or
    any reference the merchant sends when making a stand alone payment.

    """
    reference: String!

    """Id of the generated gateway payment (stand alone payments only)."""
    resultingPaymentId: bigint

    """List of statuses the payment is currently on"""
    status(
        """distinct select on columns"""
        distinctOn: [CurrentPaymentStatusSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [CurrentPaymentStatusOrderBy!]

        """filter the rows returned"""
        where: CurrentPaymentStatusBoolExp
    ): [CurrentPaymentStatus!]

    """List of statuses the payment has been on"""
    statusHistory(
        """distinct select on columns"""
        distinctOn: [CurrentPaymentStatusSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [CurrentPaymentStatusOrderBy!]

        """filter the rows returned"""
        where: CurrentPaymentStatusBoolExp
    ): [CurrentPaymentStatus!]

    """
    A computed field, executes function "runtime.get_transaction_credit_card_details"
    """
    transactionCreditCardDetails(
        """distinct select on columns"""
        distinctOn: [CreditCardDetailsSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [CreditCardDetailsOrderBy!]

        """filter the rows returned"""
        where: CreditCardDetailsBoolExp
    ): [CreditCardDetails!]

    """
    A computed field, executes function "runtime.get_transaction_finshark_details"
    """
    transactionFinsharkDetails(
        """distinct select on columns"""
        distinctOn: [FinsharkDetailsSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [FinsharkDetailsOrderBy!]

        """filter the rows returned"""
        where: FinsharkDetailsBoolExp
    ): [FinsharkDetails!]

    """
    This id uniquely identifies the transaction in kronor among other types of transactions
    """
    transactionId: String!

    """
    A computed field, executes function "runtime.get_transaction_mobilepay_details"
    """
    transactionMobilePayDetails(
        """distinct select on columns"""
        distinctOn: [MobilePayDetailsSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [MobilePayDetailsOrderBy!]

        """filter the rows returned"""
        where: MobilePayDetailsBoolExp
    ): [MobilePayDetails!]

    """
    A computed field, executes function "runtime.get_transaction_p24_details"
    """
    transactionP24Details(
        """distinct select on columns"""
        distinctOn: [P24DetailsSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [P24DetailsOrderBy!]

        """filter the rows returned"""
        where: P24DetailsBoolExp
    ): [P24Details!]

    """
    A computed field, executes function "runtime.get_transaction_paypal_details"
    """
    transactionPayPalDetails(
        """distinct select on columns"""
        distinctOn: [PayPalDetailsSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [PayPalDetailsOrderBy!]

        """filter the rows returned"""
        where: PayPalDetailsBoolExp
    ): [PayPalDetails!]

    """
    A computed field, executes function "runtime.get_transaction_swish_details"
    """
    transactionSwishDetails(
        """distinct select on columns"""
        distinctOn: [SwishDetailsSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [SwishDetailsOrderBy!]

        """filter the rows returned"""
        where: SwishDetailsBoolExp
    ): [SwishDetails!]

    """
    A computed field, executes function "runtime.get_transaction_vipps_details"
    """
    transactionVippsDetails(
        """distinct select on columns"""
        distinctOn: [VippsDetailsSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [VippsDetailsOrderBy!]

        """filter the rows returned"""
        where: VippsDetailsBoolExp
    ): [VippsDetails!]
    waitToken: uuid!
}

"""
Boolean expression to filter rows from the table "runtime.payment". All fields are combined with a logical 'AND'.
"""
input PaymentRequestBoolExp {
    _and: [PaymentRequestBoolExp!]
    _not: PaymentRequestBoolExp
    _or: [PaymentRequestBoolExp!]
    amount: BigintComparisonExp
    createdAt: TimestamptzComparisonExp
    currency: SupportedCurrencyEnumComparisonExp
    customer: CustomerPaymentDataBoolExp
    detail: CurrentPaymentDetailBoolExp
    latestStatus: CurrentPaymentStatusBoolExp
    merchant: MerchantBoolExp
    merchantReturnUrl: StringComparisonExp
    message: StringComparisonExp
    paymentFlow: StringComparisonExp
    paymentProvider: PaymentMethodEnumComparisonExp
    payment_method_used: PaymentMethodStatusBoolExp
    reference: StringComparisonExp
    resultingPaymentId: BigintComparisonExp
    status: CurrentPaymentStatusBoolExp
    statusHistory: CurrentPaymentStatusBoolExp
    transactionCreditCardDetails: CreditCardDetailsBoolExp
    transactionFinsharkDetails: FinsharkDetailsBoolExp
    transactionId: StringComparisonExp
    transactionMobilePayDetails: MobilePayDetailsBoolExp
    transactionP24Details: P24DetailsBoolExp
    transactionPayPalDetails: PayPalDetailsBoolExp
    transactionSwishDetails: SwishDetailsBoolExp
    transactionVippsDetails: VippsDetailsBoolExp
    waitToken: UuidComparisonExp
}

"""Ordering options when selecting data from "runtime.payment"."""
input PaymentRequestOrderBy {
    amount: OrderBy
    createdAt: OrderBy
    currency: OrderBy
    customer: CustomerPaymentDataOrderBy
    detailAggregate: CurrentPaymentDetailAggregateOrderBy
    latestStatusAggregate: CurrentPaymentStatusAggregateOrderBy
    merchant: MerchantOrderBy
    merchantReturnUrl: OrderBy
    message: OrderBy
    paymentFlow: OrderBy
    paymentProvider: OrderBy
    payment_method_used: PaymentMethodStatusOrderBy
    reference: OrderBy
    resultingPaymentId: OrderBy
    statusAggregate: CurrentPaymentStatusAggregateOrderBy
    statusHistoryAggregate: CurrentPaymentStatusAggregateOrderBy
    transactionCreditCardDetailsAggregate: CreditCardDetailsAggregateOrderBy
    transactionFinsharkDetailsAggregate: FinsharkDetailsAggregateOrderBy
    transactionId: OrderBy
    transactionMobilePayDetailsAggregate: MobilePayDetailsAggregateOrderBy
    transactionP24DetailsAggregate: P24DetailsAggregateOrderBy
    transactionPayPalDetailsAggregate: PayPalDetailsAggregateOrderBy
    transactionSwishDetailsAggregate: SwishDetailsAggregateOrderBy
    transactionVippsDetailsAggregate: VippsDetailsAggregateOrderBy
    waitToken: OrderBy
}

"""
select columns of table "runtime.payment"
"""
enum PaymentRequestSelectColumn {
    """column name"""
    amount

    """column name"""
    createdAt

    """column name"""
    currency

    """column name"""
    merchantReturnUrl

    """column name"""
    message

    """column name"""
    paymentFlow

    """column name"""
    paymentProvider

    """column name"""
    reference

    """column name"""
    resultingPaymentId

    """column name"""
    transactionId

    """column name"""
    waitToken
}

enum PaymentStatusEnum {
    """Payment is authorized. Can be captured now."""
    AUTHORIZED

    """Payment was cancelled."""
    CANCELLED

    """Attempting to cancel the payment."""
    CANCELLING

    """
    Payment capture is declined. Please create a new payment. (Only applicable for payments that support reservation)
    """
    CAPTURE_DECLINED

    """Payment was declined by the customer."""
    DECLINED

    """Payment errored."""
    ERROR

    """Payment is initialising."""
    INITIALIZING

    """Payment is paid."""
    PAID

    """
    Payment is partially captured. (Only applicable for payments that support reservation)
    """
    PARTIALLY_CAPTURED

    """Payment is undergoing check."""
    PRE_FLIGHT_CHECK

    """
    Payment reservation is released. (Only applicable for payments that support reservation)
    """
    RELEASED

    """Payment is requested and waiting for confirmation."""
    WAITING_FOR_PAYMENT
}

"""
Boolean expression to compare columns of type "PaymentStatusEnum". All fields are combined with logical 'AND'.
"""
input PaymentStatusEnumComparisonExp {
    _eq: PaymentStatusEnum
    _in: [PaymentStatusEnum!]
    _isNull: Boolean
    _neq: PaymentStatusEnum
    _nin: [PaymentStatusEnum!]
}

enum PaypalIntentEnum {
    """Authorize to capture funds later."""
    AUTHORIZE

    """Instant capture funds."""
    CAPTURE
}

"""
Boolean expression to compare columns of type "PaypalIntentEnum". All fields are combined with logical 'AND'.
"""
input PaypalIntentEnumComparisonExp {
    _eq: PaypalIntentEnum
    _in: [PaypalIntentEnum!]
    _isNull: Boolean
    _neq: PaypalIntentEnum
    _nin: [PaypalIntentEnum!]
}

"""
Boolean expression to compare columns of type "spoken_lang". All fields are combined with logical 'AND'.
"""
input SpokenLangComparisonExp {
    _eq: spoken_lang
    _gt: spoken_lang
    _gte: spoken_lang
    _in: [spoken_lang!]
    _isNull: Boolean
    _lt: spoken_lang
    _lte: spoken_lang
    _neq: spoken_lang
    _nin: [spoken_lang!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
    _eq: String
    _gt: String
    _gte: String

    """does the column match the given case-insensitive pattern"""
    _ilike: String
    _in: [String!]

    """
    does the column match the given POSIX regular expression, case insensitive
    """
    _iregex: String
    _isNull: Boolean

    """does the column match the given pattern"""
    _like: String
    _lt: String
    _lte: String
    _neq: String

    """does the column NOT match the given case-insensitive pattern"""
    _nilike: String
    _nin: [String!]

    """
    does the column NOT match the given POSIX regular expression, case insensitive
    """
    _niregex: String

    """does the column NOT match the given pattern"""
    _nlike: String

    """
    does the column NOT match the given POSIX regular expression, case sensitive
    """
    _nregex: String

    """does the column NOT match the given SQL regular expression"""
    _nsimilar: String

    """
    does the column match the given POSIX regular expression, case sensitive
    """
    _regex: String

    """does the column match the given SQL regular expression"""
    _similar: String
}

"""Arguments for creating a new PayPal payment"""
input SupplyPayPalPaymentMethodIdInput {
    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """
    The payment id of a PayPal payment, this is obtained when a
    payment request is made. As opposed to a payment_reference which
    is the same across multiple payment attempts, this is unique
    only for each specific payment.

    Max length: 64.
    """
    paymentId: String!

    """
    This is obtained from Braintree when you use their client SDK to
    create a payment.

    Max length: 64.
    """
    paymentMethodId: String!
}

"""
The result of supplying a PayPal paymentMethodId to a PayPal
payment.
"""
type SupplyPayPalPaymentMethodIdResult {
    """
    Once a payment is initialized, we will start the PayPal payment
    workflow. You can use this id to query the current status of the
    payment.
    """
    paymentId: String!
}

enum SupportedCurrencyEnum {
    """Swiss Franc, the currency of Switzerland"""
    CHF

    """Czech Koruna, the currency of the Czech Republic"""
    CZK

    """Danish Krone, currency of Denmark"""
    DKK

    """Euro, Currency for the states in Eurozone"""
    EUR

    """Hungarian Forint, the currency of Hungary"""
    HUF

    """Icelandic Krona, currency of Iceland"""
    ISK

    """Norwegian Krone, currency of Norway"""
    NOK

    """Polish Zloty, currency of Poland"""
    PLN

    """Romanian Leu, the currency of Romania"""
    RON

    """Swedish Krona, currency of Sweden"""
    SEK
}

"""
Boolean expression to compare columns of type "SupportedCurrencyEnum". All fields are combined with logical 'AND'.
"""
input SupportedCurrencyEnumComparisonExp {
    _eq: SupportedCurrencyEnum
    _in: [SupportedCurrencyEnum!]
    _isNull: Boolean
    _neq: SupportedCurrencyEnum
    _nin: [SupportedCurrencyEnum!]
}

"""
Describes the schema for the swish payment transaction details to be used by hasura
"""
type SwishDetails {
    amount: bigint

    """A reference sent from the bank once the payment has been made"""
    bankPaymentReference: String

    """The swish number of the customer"""
    customerSwishNumber: packed_phone_number

    """Date when the payment is created in SWISH"""
    dateCreated: timestamptz

    """Date when SWISH received the payment"""
    datePaid: timestamptz

    """Error code from swish"""
    errorCode: String

    """Error message from swish"""
    errorMessage: String
    qrCode: String
    returnUrl: String
}

"""
order by aggregate values of table "runtime.transaction_swish_details"
"""
input SwishDetailsAggregateOrderBy {
    avg: SwishDetailsAvgOrderBy
    count: OrderBy
    max: SwishDetailsMaxOrderBy
    min: SwishDetailsMinOrderBy
    stddev: SwishDetailsStddevOrderBy
    stddevPop: SwishDetailsStddevPopOrderBy
    stddevSamp: SwishDetailsStddevSampOrderBy
    sum: SwishDetailsSumOrderBy
    varPop: SwishDetailsVarPopOrderBy
    varSamp: SwishDetailsVarSampOrderBy
    variance: SwishDetailsVarianceOrderBy
}

"""
order by avg() on columns of table "runtime.transaction_swish_details"
"""
input SwishDetailsAvgOrderBy {
    amount: OrderBy
}

"""
Boolean expression to filter rows from the table "runtime.transaction_swish_details". All fields are combined with a logical 'AND'.
"""
input SwishDetailsBoolExp {
    _and: [SwishDetailsBoolExp!]
    _not: SwishDetailsBoolExp
    _or: [SwishDetailsBoolExp!]
    amount: BigintComparisonExp
    bankPaymentReference: StringComparisonExp
    customerSwishNumber: PackedPhoneNumberComparisonExp
    dateCreated: TimestamptzComparisonExp
    datePaid: TimestamptzComparisonExp
    errorCode: StringComparisonExp
    errorMessage: StringComparisonExp
    qrCode: StringComparisonExp
    returnUrl: StringComparisonExp
}

"""
order by max() on columns of table "runtime.transaction_swish_details"
"""
input SwishDetailsMaxOrderBy {
    amount: OrderBy

    """A reference sent from the bank once the payment has been made"""
    bankPaymentReference: OrderBy

    """Date when the payment is created in SWISH"""
    dateCreated: OrderBy

    """Date when SWISH received the payment"""
    datePaid: OrderBy

    """Error code from swish"""
    errorCode: OrderBy

    """Error message from swish"""
    errorMessage: OrderBy
    qrCode: OrderBy
    returnUrl: OrderBy
}

"""
order by min() on columns of table "runtime.transaction_swish_details"
"""
input SwishDetailsMinOrderBy {
    amount: OrderBy

    """A reference sent from the bank once the payment has been made"""
    bankPaymentReference: OrderBy

    """Date when the payment is created in SWISH"""
    dateCreated: OrderBy

    """Date when SWISH received the payment"""
    datePaid: OrderBy

    """Error code from swish"""
    errorCode: OrderBy

    """Error message from swish"""
    errorMessage: OrderBy
    qrCode: OrderBy
    returnUrl: OrderBy
}

"""
Ordering options when selecting data from "runtime.transaction_swish_details".
"""
input SwishDetailsOrderBy {
    amount: OrderBy
    bankPaymentReference: OrderBy
    customerSwishNumber: OrderBy
    dateCreated: OrderBy
    datePaid: OrderBy
    errorCode: OrderBy
    errorMessage: OrderBy
    qrCode: OrderBy
    returnUrl: OrderBy
}

"""
select columns of table "runtime.transaction_swish_details"
"""
enum SwishDetailsSelectColumn {
    """column name"""
    amount

    """column name"""
    bankPaymentReference

    """column name"""
    customerSwishNumber

    """column name"""
    dateCreated

    """column name"""
    datePaid

    """column name"""
    errorCode

    """column name"""
    errorMessage

    """column name"""
    qrCode

    """column name"""
    returnUrl
}

"""
order by stddev() on columns of table "runtime.transaction_swish_details"
"""
input SwishDetailsStddevOrderBy {
    amount: OrderBy
}

"""
order by stddevPop() on columns of table "runtime.transaction_swish_details"
"""
input SwishDetailsStddevPopOrderBy {
    amount: OrderBy
}

"""
order by stddevSamp() on columns of table "runtime.transaction_swish_details"
"""
input SwishDetailsStddevSampOrderBy {
    amount: OrderBy
}

"""
order by sum() on columns of table "runtime.transaction_swish_details"
"""
input SwishDetailsSumOrderBy {
    amount: OrderBy
}

"""
order by varPop() on columns of table "runtime.transaction_swish_details"
"""
input SwishDetailsVarPopOrderBy {
    amount: OrderBy
}

"""
order by varSamp() on columns of table "runtime.transaction_swish_details"
"""
input SwishDetailsVarSampOrderBy {
    amount: OrderBy
}

"""
order by variance() on columns of table "runtime.transaction_swish_details"
"""
input SwishDetailsVarianceOrderBy {
    amount: OrderBy
}

"""Arguments for cancelling a swish payment"""
input SwishPaymentCancelInput {
    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """
    The payment id to cancel, this is obtained when a payment
    request is made. As opposed to a payment_reference which is
    the same across multiple payment attempts, this is unique only
    for each specific payment.

    Max length: 64.
    """
    paymentId: String!
}

"""The result of cancelling a swish payment request."""
type SwishPaymentCancelResult {
    """
    The returned token can be used to query whether the payment has
    been cancelled or not.
    """
    waitToken: String!
}

"""Arguments for creating a new swish payment"""
input SwishPaymentInput {
    """The Swish number of the customer, required for the 'ecom' flow"""
    customerSwishNumber: String

    """
    Payment flow, either 'ecom' or 'mcom'

    Max length: 64.
    """
    flow: String!

    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """The original return url as provided by the merchant."""
    merchantReturnUrl: String

    """The url to return to after the payment is done."""
    returnUrl: String!
}

"""The result of initiating a swish payment."""
type SwishPaymentResult {
    """
    Once a payment is initialized, we will start the swish payment
    workflow. You can use this token to query the current status
    of the payment.
    """
    waitToken: String!
}

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _isNull: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input UuidComparisonExp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _isNull: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}

"""Describe the schema for Vipps details."""
type VippsDetails {
    """Session id"""
    sessionId: String

    """Session url"""
    sessionUrl: String
}

"""
order by aggregate values of table "runtime.transaction_vipps_details"
"""
input VippsDetailsAggregateOrderBy {
    count: OrderBy
    max: VippsDetailsMaxOrderBy
    min: VippsDetailsMinOrderBy
}

"""
Boolean expression to filter rows from the table "runtime.transaction_vipps_details". All fields are combined with a logical 'AND'.
"""
input VippsDetailsBoolExp {
    _and: [VippsDetailsBoolExp!]
    _not: VippsDetailsBoolExp
    _or: [VippsDetailsBoolExp!]
    sessionId: StringComparisonExp
    sessionUrl: StringComparisonExp
}

"""
order by max() on columns of table "runtime.transaction_vipps_details"
"""
input VippsDetailsMaxOrderBy {
    """Session id"""
    sessionId: OrderBy

    """Session url"""
    sessionUrl: OrderBy
}

"""
order by min() on columns of table "runtime.transaction_vipps_details"
"""
input VippsDetailsMinOrderBy {
    """Session id"""
    sessionId: OrderBy

    """Session url"""
    sessionUrl: OrderBy
}

"""
Ordering options when selecting data from "runtime.transaction_vipps_details".
"""
input VippsDetailsOrderBy {
    sessionId: OrderBy
    sessionUrl: OrderBy
}

"""
select columns of table "runtime.transaction_vipps_details"
"""
enum VippsDetailsSelectColumn {
    """column name"""
    sessionId

    """column name"""
    sessionUrl
}

"""Arguments for creating a new Vipps payment"""
input VippsPaymentInput {
    """
    Idempotency key is required to prevent double processing a request.
    It is recommended to use a deterministic unique value, such as the combination of
    the order id and the customer id. Avoid using time-based values.
    Only alphanumeric character and the following are allowed:
    - "-"
    - "_"
    - "."
    - ","
    - "["
    - "]"
    - "+"

    Max length: 64.
    """
    idempotencyKey: String!

    """The original return url as provided by the merchant."""
    merchantReturnUrl: String

    """
    The url to return to after the payment is done. If the payment
    screen is opened on a separate window, customer will be redirected
    here on payment success or error.
    """
    returnUrl: String!
}

"""The result of initiating a Vipps payment."""
type VippsPaymentResult {
    """
    Once a payment is initialized, we will start the Vipps payment
    workflow. You can use this token to query the current status
    of the payment, with paymentRequests query.
    """
    waitToken: String!
}

scalar bigint

"""Settings for using Braintree"""
type braintreeSetting {
    currency: SupportedCurrencyEnum!
    paypalClientId: String!
    tokenizationKey: String!
}

"""
Boolean expression to filter rows from the table "tenant.braintree_setting". All fields are combined with a logical 'AND'.
"""
input braintreeSettingBoolExp {
    _and: [braintreeSettingBoolExp!]
    _not: braintreeSettingBoolExp
    _or: [braintreeSettingBoolExp!]
    currency: SupportedCurrencyEnumComparisonExp
    paypalClientId: StringComparisonExp
    tokenizationKey: StringComparisonExp
}

"""Ordering options when selecting data from "tenant.braintree_setting"."""
input braintreeSettingOrderBy {
    currency: OrderBy
    paypalClientId: OrderBy
    tokenizationKey: OrderBy
}

"""
select columns of table "tenant.braintree_setting"
"""
enum braintreeSettingSelectColumn {
    """column name"""
    currency

    """column name"""
    paypalClientId

    """column name"""
    tokenizationKey
}

"""
Streaming cursor of the table "braintreeSetting"
"""
input braintreeSettingStreamCursorInput {
    """Stream column input with initial value"""
    initialValue: braintreeSettingStreamCursorValueInput!

    """cursor ordering"""
    ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input braintreeSettingStreamCursorValueInput {
    currency: SupportedCurrencyEnum
    paypalClientId: String
    tokenizationKey: String
}

scalar country

scalar currency

scalar jsonb

"""mutation root"""
type mutation_root {
    """Set customer device information for a given payment session."""
    addSessionDeviceInformation(info: AddSessionDeviceInformationInput!): AddSessionDeviceInformationResult!

    """Cancel payment request made using newDirectDebitPayment."""
    cancelDirectDebitPayment(pay: DirectDebitPaymentCancelInput!): DirectDebitPaymentCancelResult!

    """Cancel payment request."""
    cancelPayment(cancel: PaymentCancelInput!): PaymentCancelResult!

    """Cancel payment request made using newSwishPayment."""
    cancelSwishPayment(pay: SwishPaymentCancelInput!): SwishPaymentCancelResult!

    """Capture PayPal payment"""
    capturePayPalPayment(pay: CapturePayPalPaymentInput!): CapturePayPalPaymentResult!

    """Log information about various stages of the payment component."""
    log(info: LogInput!): LogResult!

    """Create a new payment request to receive money via credit card"""
    newCreditCardPayment(pay: CreditCardPaymentInput!): CreditCardPaymentResult!

    """Create a new payment request to receive money via Finshark"""
    newDirectDebitPayment(pay: DirectDebitPaymentInput!): DirectDebitPaymentResult!

    """
    Create a new payment request to receive money via MobilePay, available only in Denmark and Finland.
    """
    newMobilePayPayment(pay: MobilePayPaymentInput!): MobilePayPaymentResult!

    """Create a new payment request to receive money via P24"""
    newP24Payment(pay: P24PaymentInput!): P24PaymentResult!

    """Create a new payment request to receive money via PayPal"""
    newPayPalPayment(pay: PayPalPaymentInput!): PayPalPaymentResult!

    """Create a new payment request to receive money via swish"""
    newSwishPayment(pay: SwishPaymentInput!): SwishPaymentResult!

    """
    Create a new payment request to receive money via Vipps, available only in Norway.
    """
    newVippsPayment(pay: VippsPaymentInput!): VippsPaymentResult!

    """Supply PaymentMethodId (nonce) to progress PayPal paymeent"""
    supplyPayPalPaymentMethodId(pay: SupplyPayPalPaymentMethodIdInput!): SupplyPayPalPaymentMethodIdResult!
}

scalar packed_phone_number

"""Table to hold PayPal credentials"""
type paypalSetting {
    """
    '
    BN code is a character string that uniquely identifies us with PayPal to
    properly attribute payments. We pass this in all PayPal API calls in the
    `PayPal-Partner-Attribution-Id` header
    '
    """
    bnCode: String!

    """The client_id of the PayPal app"""
    clientId: String!

    """The intent of a PayPal order: `AUTHORIZE` or `CAPTURE`"""
    intent: PaypalIntentEnum!
}

"""
Boolean expression to filter rows from the table "tenant.paypal_setting". All fields are combined with a logical 'AND'.
"""
input paypalSettingBoolExp {
    _and: [paypalSettingBoolExp!]
    _not: paypalSettingBoolExp
    _or: [paypalSettingBoolExp!]
    bnCode: StringComparisonExp
    clientId: StringComparisonExp
    intent: PaypalIntentEnumComparisonExp
}

"""Ordering options when selecting data from "tenant.paypal_setting"."""
input paypalSettingOrderBy {
    bnCode: OrderBy
    clientId: OrderBy
    intent: OrderBy
}

"""
select columns of table "tenant.paypal_setting"
"""
enum paypalSettingSelectColumn {
    """column name"""
    bnCode

    """column name"""
    clientId

    """column name"""
    intent
}

"""
Streaming cursor of the table "paypalSetting"
"""
input paypalSettingStreamCursorInput {
    """Stream column input with initial value"""
    initialValue: paypalSettingStreamCursorValueInput!

    """cursor ordering"""
    ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input paypalSettingStreamCursorValueInput {
    """
    '
    BN code is a character string that uniquely identifies us with PayPal to
    properly attribute payments. We pass this in all PayPal API calls in the
    `PayPal-Partner-Attribution-Id` header
    '
    """
    bnCode: String

    """The client_id of the PayPal app"""
    clientId: String

    """The intent of a PayPal order: `AUTHORIZE` or `CAPTURE`"""
    intent: PaypalIntentEnum
}

type query_root {
    """
    fetch data from the table: "tenant.braintree_setting"
    """
    braintreeSetting(
        """distinct select on columns"""
        distinctOn: [braintreeSettingSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [braintreeSettingOrderBy!]

        """filter the rows returned"""
        where: braintreeSettingBoolExp
    ): [braintreeSetting!]!

    """Select a single merchant by Id"""
    merchant(id: bigint!): Merchant

    """
    fetch data from the table: "tenant.payment_method_available"
    """
    paymentMethodStatus(
        """distinct select on columns"""
        distinctOn: [PaymentMethodStatusSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [PaymentMethodStatusOrderBy!]

        """filter the rows returned"""
        where: PaymentMethodStatusBoolExp
    ): [PaymentMethodStatus!]!

    """Get the list of payment requests"""
    paymentRequests(
        """distinct select on columns"""
        distinctOn: [PaymentRequestSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [PaymentRequestOrderBy!]

        """filter the rows returned"""
        where: PaymentRequestBoolExp
    ): [PaymentRequest!]!

    """
    fetch data from the table: "tenant.paypal_setting"
    """
    paypalSetting(
        """distinct select on columns"""
        distinctOn: [paypalSettingSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [paypalSettingOrderBy!]

        """filter the rows returned"""
        where: paypalSettingBoolExp
    ): [paypalSetting!]!
    version: String!
}

scalar spoken_lang

type subscription_root {
    """
    fetch data from the table in a streaming manner: "tenant.payment_method_available"
    """
    PaymentMethodStatusStream(
        """maximum number of rows returned in a single batch"""
        batchSize: Int!

        """cursor to stream the results returned by the query"""
        cursor: [PaymentMethodStatusStreamCursorInput]!

        """filter the rows returned"""
        where: PaymentMethodStatusBoolExp
    ): [PaymentMethodStatus!]!

    """
    fetch data from the table: "tenant.braintree_setting"
    """
    braintreeSetting(
        """distinct select on columns"""
        distinctOn: [braintreeSettingSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [braintreeSettingOrderBy!]

        """filter the rows returned"""
        where: braintreeSettingBoolExp
    ): [braintreeSetting!]!

    """
    fetch data from the table in a streaming manner: "tenant.braintree_setting"
    """
    braintreeSettingStream(
        """maximum number of rows returned in a single batch"""
        batchSize: Int!

        """cursor to stream the results returned by the query"""
        cursor: [braintreeSettingStreamCursorInput]!

        """filter the rows returned"""
        where: braintreeSettingBoolExp
    ): [braintreeSetting!]!

    """
    fetch data from the table: "tenant.payment_method_available"
    """
    paymentMethodStatus(
        """distinct select on columns"""
        distinctOn: [PaymentMethodStatusSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [PaymentMethodStatusOrderBy!]

        """filter the rows returned"""
        where: PaymentMethodStatusBoolExp
    ): [PaymentMethodStatus!]!

    """Get the list of payment requests"""
    paymentRequests(
        """distinct select on columns"""
        distinctOn: [PaymentRequestSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [PaymentRequestOrderBy!]

        """filter the rows returned"""
        where: PaymentRequestBoolExp
    ): [PaymentRequest!]!

    """
    fetch data from the table: "tenant.paypal_setting"
    """
    paypalSetting(
        """distinct select on columns"""
        distinctOn: [paypalSettingSelectColumn!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        orderBy: [paypalSettingOrderBy!]

        """filter the rows returned"""
        where: paypalSettingBoolExp
    ): [paypalSetting!]!

    """
    fetch data from the table in a streaming manner: "tenant.paypal_setting"
    """
    paypalSettingStream(
        """maximum number of rows returned in a single batch"""
        batchSize: Int!

        """cursor to stream the results returned by the query"""
        cursor: [paypalSettingStreamCursorInput]!

        """filter the rows returned"""
        where: paypalSettingBoolExp
    ): [paypalSetting!]!
}

scalar timestamptz

scalar uuid

